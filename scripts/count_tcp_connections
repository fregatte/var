#!/usr/bin/env python
"""
Скрипт для подсчёта количества TCP подключений, установленных на хосте,
позволяет  выбирать source и destination адрес, и возвращает результат
в человекочитаемом виде или в виде JSON.
"""
import shlex
import subprocess
import argparse


# Dictionary for parse SS output
STATE = {
    'ESTAB':      0,
    'SYN-SENT':   1,
    'SYN-RECV':   2,
    'FIN-WAIT-1': 3,
    'FIN-WAIT-2': 4,
    'TIME-WAIT':  5,
    'UNCONN':     6,
    'CLOSE-WAIT': 7,
    'LAST-ACK':   8,
    'LISTEN':     9,
    'CLOSING':    10
}

# List of counters for different TCP states
COUNT_CONN = []
COUNT_CONN.append([0, "ESTABLISHED"])
COUNT_CONN.append([0, "SYN-SENT"])
COUNT_CONN.append([0, "SYN-RECV"])
COUNT_CONN.append([0, "FIN-WAIT-1"])
COUNT_CONN.append([0, "FIN-WAIT-2"])
COUNT_CONN.append([0, "TIME-WAIT"])
COUNT_CONN.append([0, "CLOSE"])
COUNT_CONN.append([0, "CLOSE-WAIT"])
COUNT_CONN.append([0, "LAST-ACK"])
COUNT_CONN.append([0, "LISTEN"])
COUNT_CONN.append([0, "CLOSING"])

COUNT_ALL = 0


def create_parser():
    """ PARSER for input args """
    _ps = argparse.ArgumentParser()
    _ps.add_argument('-j', '--json', action='store_const', const=True,
                     default=False,
                     help='Enable print results in JSON format')
    _ps.add_argument('-s', '--src', default='',
                     help='Use specific source address (IP or IP:port)')
    _ps.add_argument('-d', '--dst', default='',
                     help='Use specific destination address (IP or IP:port)')
    return _ps


def print_default():
    """ Return result in human-readable view """
    print('%5d %s' % (COUNT_ALL, "ALL"))
    for _num in COUNT_CONN:
        print('%5d %s' % (_num[0], _num[1]))


def print_json():
    """ Return results in JSON-view """
    json_ret = "<prtg><result><channel>ALL</channel><value>"
    json_ret += str(COUNT_ALL)
    json_ret += "</value></result>"
    for state in COUNT_CONN:
        json_ret += "<result><channel>" + state[1] + "</channel>"
        json_ret += "<value>" + str(state[0]) + "</value></result>"
    json_ret += "</prtg>"
    print(json_ret)


# __________ MAIN __________ #
if __name__ == '__main__':

    PARSER = create_parser()
    ARG = PARSER.parse_args()

    # Check for SS parameters from command line
    SS_CMD = "ss -tn state connected"
    if ARG.src:
        SS_CMD += " src " + ARG.src
    if ARG.dst:
        SS_CMD += " dst " + ARG.dst

    # Run SS utility to collect data about TCP-connctions
    SS_RAW = subprocess.Popen(shlex.split(SS_CMD), stdout=subprocess.PIPE)

    # Collect only TCP state of connection
    RAW_DATA = []
    for line in SS_RAW.stdout.readlines():
        RAW_DATA.append(line.rstrip().split()[0])

    # Count TCP states by types
    for conn in RAW_DATA:
        if conn in STATE:
            COUNT_CONN[STATE[conn]][0] += 1
            COUNT_ALL += 1

    # Return result
    if ARG.json:
        print_json()
    else:
        print_default()
